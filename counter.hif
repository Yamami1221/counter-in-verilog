HIF003
--
-- Copyright (C) 1988-2002 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	counter.v
	{
		counter [] []
		{
			0 [] [];
		}
		clockDivisor [] []
		{
			1 [] [];
		}
		T_FF [] []
		{
			2 [] [];
		}
		D_FF [] []
		{
			3 [] [];
		}
	}
}
TREE
{
	counter::(0,0):(0): counter.v
	{
		clockdivisor:1:(6,0):(7,cd): counter.v
		{
			t_ff:2:(18,0):(4,t0): counter.v
			{
				d_ff:3:(46,0):(6,dff): counter.v;
			}
			t_ff:2:(19,0):(5,t1): counter.v
			{
				d_ff:3:(46,0):(6,dff): counter.v;
			}
			t_ff:2:(20,0):(6,t2): counter.v
			{
				d_ff:3:(46,0):(6,dff): counter.v;
			}
			t_ff:2:(21,0):(7,t3): counter.v
			{
				d_ff:3:(46,0):(6,dff): counter.v;
			}
			t_ff:2:(22,0):(8,t4): counter.v
			{
				d_ff:3:(46,0):(6,dff): counter.v;
			}
			t_ff:2:(23,0):(9,t5): counter.v
			{
				d_ff:3:(46,0):(6,dff): counter.v;
			}
			t_ff:2:(24,0):(10,t6): counter.v
			{
				d_ff:3:(46,0):(6,dff): counter.v;
			}
			t_ff:2:(25,0):(11,t7): counter.v
			{
				d_ff:3:(46,0):(6,dff): counter.v;
			}
			t_ff:2:(26,0):(12,t8): counter.v
			{
				d_ff:3:(46,0):(6,dff): counter.v;
			}
			t_ff:2:(27,0):(13,t9): counter.v
			{
				d_ff:3:(46,0):(6,dff): counter.v;
			}
			t_ff:2:(28,0):(14,t10): counter.v
			{
				d_ff:3:(46,0):(6,dff): counter.v;
			}
			t_ff:2:(29,0):(15,t11): counter.v
			{
				d_ff:3:(46,0):(6,dff): counter.v;
			}
			t_ff:2:(30,0):(16,t12): counter.v
			{
				d_ff:3:(46,0):(6,dff): counter.v;
			}
			t_ff:2:(31,0):(17,t13): counter.v
			{
				d_ff:3:(46,0):(6,dff): counter.v;
			}
			t_ff:2:(32,0):(18,t14): counter.v
			{
				d_ff:3:(46,0):(6,dff): counter.v;
			}
			t_ff:2:(33,0):(19,t15): counter.v
			{
				d_ff:3:(46,0):(6,dff): counter.v;
			}
			t_ff:2:(34,0):(20,t16): counter.v
			{
				d_ff:3:(46,0):(6,dff): counter.v;
			}
			t_ff:2:(35,0):(21,t17): counter.v
			{
				d_ff:3:(46,0):(6,dff): counter.v;
			}
			t_ff:2:(36,0):(22,t18): counter.v
			{
				d_ff:3:(46,0):(6,dff): counter.v;
			}
			t_ff:2:(37,0):(23,t19): counter.v
			{
				d_ff:3:(46,0):(6,dff): counter.v;
			}
		}
		t_ff:2:(7,0):(8,t0): counter.v
		{
			d_ff:3:(46,0):(6,dff): counter.v;
		}
		t_ff:2:(8,0):(9,t1): counter.v
		{
			d_ff:3:(46,0):(6,dff): counter.v;
		}
		t_ff:2:(9,0):(10,t2): counter.v
		{
			d_ff:3:(46,0):(6,dff): counter.v;
		}
		t_ff:2:(10,0):(11,t3): counter.v
		{
			d_ff:3:(46,0):(6,dff): counter.v;
		}
	}
}
